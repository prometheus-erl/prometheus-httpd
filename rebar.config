{erl_opts, [
    debug_info,
    warn_unused_vars,
    warnings_as_errors,
    warn_export_all,
    warn_shadow_vars,
    warn_unused_import,
    warn_unused_function,
    warn_bif_clash,
    warn_unused_record,
    warn_deprecated_function,
    warn_obsolete_guard,
    strict_validation,
    warn_export_vars,
    warn_exported_vars,
    warn_missing_spec,
    warn_missing_doc
]}.

{deps, [
    {prometheus, "~> 5.0"},
    {accept, "~> 0.3"}
]}.

{shell, [{apps, [prometheus_httpd]}]}.

{xref_extra_paths, []}.
{xref_checks, [
    undefined_function_calls,
    undefined_functions,
    locals_not_used,
    deprecated_function_calls,
    deprecated_functions
]}.

{profiles, [
    {test, [
        {erl_opts, [nowarn_export_all, nowarn_missing_spec, nowarn_missing_doc]},
        {covertool, [{coverdata_files, ["eunit.coverdata", "ct.coverdata"]}]},
        {cover_enabled, true},
        {cover_export_enabled, true}
    ]}
]}.

{project_plugins, [
    {rebar3_hex, "~> 7.0"},
    {rebar3_lint, "~> 4.0"},
    {rebar3_ex_doc, "~> 0.2"},
    {erlfmt, "~> 1.6"},
    {covertool, "~> 2.0"}
]}.

{hex, [{doc, #{provider => ex_doc}}]}.

{ex_doc, [
    {source_url, <<"https://github.com/prometheus-erl/prometheus-httpd">>},
    {main, <<"readme">>},
    {extras, [
        {'README.md', #{title => <<"Overview">>}},
        {'LICENSE', #{title => <<"License">>}}
    ]}
]}.

{erlfmt, [
    write,
    {files, [
        "include/**/*.{hrl,erl,app.src}",
        "src/**/*.{hrl,erl,app.src}",
        "test/**/*.{hrl,erl,app.src}",
        "rebar.config"
    ]}
]}.

{elvis, [
    #{
        dirs => ["src"],
        filter => "*.erl",
        rules => [
            {elvis_text_style, line_length, #{limit => 100}},
            {elvis_style, invalid_dynamic_call, #{
                ignore => [
                    prometheus_http_impl,
                    prometheus_httpd_config
                ]
            }},
            {elvis_style, atom_naming_convention, #{
                regex => "^([a-z][a-zA-Z0-9_]*_?)*(_SUITE)?$"
            }},
            {elvis_style, function_naming_convention, #{
                regex => "^([a-z][a-zA-Z0-9_]*_?)*(_SUITE)?$"
            }},
            {elvis_style, nesting_level, #{level => 5}},
            {elvis_style, god_modules, #{limit => 40}},
            {elvis_style, dont_repeat_yourself, #{min_complexity => 20}}
        ],
        ruleset => erl_files
    },
    #{
        dirs => ["test/"],
        filter => "*.erl",
        rules => [
            {elvis_text_style, line_length, #{limit => 100}},
            {elvis_style, no_debug_call, #{
                ignore => [],
                debug_functions => []
            }},
            {elvis_style, invalid_dynamic_call, #{ignore => []}},
            {elvis_style, god_modules, #{limit => 40}},
            %% looks like eunit generates underscored vars
            {elvis_style, variable_naming_convention, #{regex => "^([A-Z_][0-9a-zA-Z_]*)$"}},
            {elvis_style, dont_repeat_yourself, #{min_complexity => 200}}
        ],
        ruleset => erl_files
    },
    #{
        dirs => ["."],
        filter => "rebar.config",
        ruleset => rebar_config
    }
]}.
